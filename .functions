#! /bin/bash -e

# list all user-defined functions
function listUdf() {
	declare -F | grep "udf"
}

# user-defined bash functions

# create zip folder of all files stored in encrypted volume - Keys
function udfArchiveDriveKeys() {
	VERSION=BBKing
	mv "/Volumes/Keys/keysArchive_$VERSION.zip" "/Volumes/Keys/keysArchive_${VERSION}_OLD.zip"
	zip -er /Volumes/Keys/keysArchive_$VERSION.zip /Volumes/Keys/
}

# reloadDefaultSSH key file (necessary after OS patch, etc.)
function udfAudio-fix() {
	sudo kextunload /System/Library/Extensions/AppleHDA.kext
	sudo kextload /System/Library/Extensions/AppleHDA.kext
	echo -e "\n*** processing complete - ${BASH_SOURCE[0]} ***"
}

# unmount encrypted volume - Keys
function udfDetachDriveKeys() {
        hdiutil detach ~/keys_clapton.dmg
}

# connect to Docker-Machine environment (arg1)
function udfDme() {
	eval $(docker-machine env ${1})
	docker-machine active
}

# mount encrypted volume - Keys
function udfMountDriveKeys() {
	hdiutil attach ~/keys_clapton.dmg
}

# launch RabbitMQ server with increased per-user limit on open files
function launchRabbitMQ() {
		ulimit -S -n 4096
		rabbitmq-server
}

# bounce mDNSResponder and cycle dnsmasq, used when DNS resolution not working 
# on Mac
function udfDnsBounce() {
  sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
  sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
  sudo launchctl stop homebrew.mxcl.dnsmasq
  sudo launchctl start homebrew.mxcl.dnsmasq
}

# find files that match pattern passed in as argument
function udfFindPattern() {
  grep -rnw . -e "$1"
}

# read Bluetooth power state
function udfBluetoothPowerstate() {
	echo $1
    DESIRED_STATE=$1
	if [ -z $DESIRED_STATE ]
	then
		#read the current pref, returns '0' for off and '1' for on.
		POWER_STATE=$(defaults read /Library/Preferences/com.apple.Bluetooth.plist ControllerPowerState)
		if [ $POWER_STATE -eq 0 ]; then
			echo "Bluetooth power is off"
		else 
			echo "Bluetooth power is on"
		fi
	else
		if [ $DESIRED_STATE == "off" ]; then
			#set bluetooth pref to off
			sudo defaults write /Library/Preferences/com.apple.Bluetooth.plist ControllerPowerState 0
		elif [ $DESIRED_STATE == "on" ]; then
			#set bluetooth pref to on
			sudo defaults write /Library/Preferences/com.apple.Bluetooth.plist ControllerPowerState 1
		fi
	fi
}

# read Bluetooth power state
function udfBluetoothDeletePlist() {
	sudo rm /Library/Preferences/com.apple.Bluetooth.plist*
}

# retrieve orb info based on search string 
function udfOrbInfoSearch() {
	echo $1
	SEARCHSTRING=$1
	if [ -z $SEARCHSTRING ]; then
		echo "Provide valid grep search string"
	else
	    RESULT=$(circleci orb list -u | grep "$SEARCHSTRING" | awk '{print $1}')	
		RESULT=( $RESULT )	
		echo "Count: "${#RESULT[@]}
		printf "%s\n" "${RESULT[@]}"
		for i in "${RESULT[@]}"; do
			circleci orb info $(circleci orb list -u | grep "$i" | awk '{print $1}')
		done
	fi
}

function udfPostgreSqlServer() {
	echo $1
	PARAMETER=$1
	if [ -z $PARAMETER ]; then
		echo "Provide valid action as parameter"
	else
		if [ $PARAMETER == "start" ]; then
			pg_ctl -D /usr/local/var/postgres start
		elif [ $PARAMETER == "stop" ]; then
			pg_ctl -D /usr/local/var/postgres stop
		elif [ $PARAMETER == "status" ]; then
			pg_ctl -D /usr/local/var/postgres status	
		fi
	fi
}

# # bounce Bluetooth service
# function udfBluetoothBounce() {
# 	#kill the bluetooth server process
# 	killall blued
# 	#unload the daemon 
# 	launchctl unload /System/Library/LaunchDaemons/com.apple.blued.plist
# 	#reload the daemon
# 	launchctl load /System/Library/LaunchDaemons/com.apple.blued.plist
# 	#restart blued daemon true
# 	launchctl start com.apple.blued
# }

